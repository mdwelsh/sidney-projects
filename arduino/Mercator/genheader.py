#!/usr/bin/env python

import argparse
import sys
from PIL import Image

def process_image(infile, width, height, outfile, name, outimage=False):
    img = Image.open(infile)
    img = img.convert('RGB')
    img = img.resize((width, height), resample=Image.NEAREST)

    if outimage:
        img.save(outfile)
        print(f"Saved scaled image to {outfile}")
        return

    pixels = list(img.getdata())

    with open(outfile, "w+") as outf:
        outf.write(f"// Generated by genheader.py --name {name} --width {width} --height {height} {infile} {outfile}\n")
        outf.write(f"#define IMAGE_COLUMNS_{name} {width}\n")
        outf.write(f"#define IMAGE_ROWS_{name} {height}\n")
        outf.write(f"const static uint8_t IMAGE_{name}[] = {{\n")
        for pixel in pixels:
            r, g, b = pixel
            outf.write(f"{b:#04x}, {g:#04x}, {r:#04x},\n")
        outf.write("};\n")
    print(f"Saved header to {outfile}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--name", type=str, required=True)
    parser.add_argument("--width", type=int, default=72)
    parser.add_argument("--height", type=int, default=36)
    parser.add_argument("--outimage", action="store_true")
    parser.add_argument("infile")
    parser.add_argument("outfile")
    args = parser.parse_args()

    process_image(args.infile, args.width, args.height, args.outfile, args.name, args.outimage)


if __name__ == "__main__":
    main()
